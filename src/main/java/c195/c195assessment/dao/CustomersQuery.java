package c195.c195assessment.dao;

import c195.c195assessment.helper.AppContext;
import c195.c195assessment.model.Customer;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * Provides functionality for performing CRUD operations on the {@code customers} table in the database.
 * This includes creating new customer records, reading existing records, updating them, and deleting them.
 */
public abstract class CustomersQuery {

    /**
     * Retrieves all customer records from the database and returns them as an observable list.
     *
     * @return An {@link ObservableList} of {@link Customer} objects, each representing a record in the customers table.
     */
    public static ObservableList<Customer> readAll() {
        ObservableList<Customer> customers = FXCollections.observableArrayList();
        String sql = "SELECT * FROM customers";
        try {
            PreparedStatement ps = JDBC.connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Customer customer = new Customer(
                        rs.getInt("Customer_ID"),
                        rs.getString("Customer_Name"),
                        rs.getString("Address"),
                        rs.getString("Postal_Code"),
                        rs.getString("Phone"),
                        rs.getTimestamp("Create_Date").toLocalDateTime(),
                        rs.getString("Created_By"),
                        rs.getTimestamp("Last_Update").toInstant(),
                        rs.getString("Last_Updated_By"),
                        rs.getInt("Division_ID")
                );
                customers.add(customer);
            }
        }
        catch (SQLException e) {
            System.out.println("Error retrieving customers: " + e.getMessage());
        }
        return customers;
    }

    /**
     * Updates the specified {@link Customer} record in the database based on the provided {@link Customer} object's ID.
     *
     * @param customer The {@link Customer} object containing updated information for the record.
     * @return {@code true} if the update was successful, {@code false} otherwise.
     */
    public static boolean update(Customer customer) {
        String sql = "UPDATE customers SET Customer_Name = ?, Address = ?, Postal_Code = ?, Phone = ?, Last_Update = NOW(), Last_Updated_By = ?, Division_ID = ? WHERE Customer_ID = ?";
        try {
            PreparedStatement ps = JDBC.connection.prepareStatement(sql);

            // Set attributes from Customer object
            ps.setString(1, customer.getCustomerName());
            ps.setString(2, customer.getAddress());
            ps.setString(3, customer.getPostalCode());
            ps.setString(4, customer.getPhone());
            ps.setString(5, AppContext.getUser().getUserName());
            ps.setInt(6, customer.getDivisionID());
            ps.setInt(7, customer.getCustomerID());

            // Execute update and return the number of affected rows
            int affectedRows = ps.executeUpdate();
            return affectedRows > 0;
        }
        catch (SQLException e) {
            System.out.println("Error updating customer: " + e.getMessage());
            return false;
        }
    }

    /**
     * Inserts a new customer record into the database based on the provided {@link Customer} object.
     * The Customer_ID is auto-generated by the database.
     *
     * @param customer The {@link Customer} object containing information for the new record.
     */
    public static void insert(Customer customer) {
        String sql = "INSERT INTO customers (Customer_Name, Address, Postal_Code, Phone, Create_Date, Created_By, " +
                "Last_Update, Last_Updated_By, Division_ID) VALUES(?, ?, ?, ?, NOW(), ?, NOW(), ?, ?)";
        try {
            PreparedStatement ps = JDBC.connection.prepareStatement(sql);
            ps.setString(1, customer.getCustomerName());
            ps.setString(2, customer.getAddress());
            ps.setString(3, customer.getPostalCode());
            ps.setString(4, customer.getPhone());
            // Create_Date is set by the database
            ps.setString(5, AppContext.getUser().getUserName());
            // Last_Update is set by the database
            ps.setString(6, AppContext.getUser().getUserName());
            ps.setInt(7, customer.getDivisionID());

            int affectedRows = ps.executeUpdate();

            if (affectedRows == 0) { throw new SQLException("Creating customer failed, no row affected"); }
        }
        catch (SQLException e) { System.out.println(e.getMessage()); }
    }

    /**
     * Deletes a customer record from the database identified by the specified Customer_ID.
     *
     * @param customerID The ID of the customer to be deleted.
     * @return {@code true} if the deletion was successful, {@code false} otherwise.
     */
    public static boolean deleteByID(int customerID) {
        String sql = "DELETE FROM customers WHERE Customer_ID = ?";

        try (PreparedStatement ps = JDBC.connection.prepareStatement(sql)) {
            ps.setInt(1, customerID);
            int affectedRows = ps.executeUpdate();
            return affectedRows > 0;
        }
        catch (SQLException e) {
            System.out.println("Error deleting customer: " + e.getMessage());
            return false;
        }
    }
}
